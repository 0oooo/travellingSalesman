package travellingSalesman;

/**
 * Implementation of the Travelling Salesman Problem
 * This is the main class (with main method)
 * It reads the problem passed through the argument list: 
 * In eclipse, run configuration, in arguments add the path of the problem to be read
 * Example: "/Users/CC/Documents/CS/travellingSalesman/travellingSalesman/test1tsp.txt"
 * 
 * The class reads the file first and parse it into a "Map" class that contains: 
 * - all the cities
 * - the number of cities
 * - the number of possible paths
 * 
 * @author Camille
 *
 */

public class TravellingSalesman {

	static ProblemParser reader;
	static City[] cities; 
	static int numberOfPaths;
	static int numberOfCities;
	
	
	/**
	 * 
	 * @param fileToRead
	 */
	public static void readFile(String fileToRead) {
		// Read the file and parse it to a map
		reader = new ProblemParser(fileToRead);

		Map myMap = reader.getMap();
		cities = myMap.getCities();
		numberOfPaths = myMap.getNumberOfPaths();
		numberOfCities = myMap.getNumberOfCities() + 1; // + 1 because we have to go back to the first city
//		myMap.generateRoadMatrix();
//		myMap.printRoadMatrix();

	}
	
	/**
	 *   Implementation of the DFS
	 *   Creates a Query object which allows to have in one place: 
	 *   - a path, 
	 *   - all the cities,
	 *   - the visited cities 
	 *   - and the current best cost for a path
	 *   Then initiate the the DFS, run the search with the Query object 
	 *   and print the result
	 */
	public static void doDFS(City[] cities, int numberOfPaths) {
		Query query = new Query(cities);
		DFS dfs = new DFS(numberOfPaths);
		Result result = dfs.search(query);
		result.printResult();
		
		/* For information purposes, it is possible to print all the paths generated by DFS */
//		AllPaths allPaths = dfs.getAllPaths();
//		allPaths.printAllPath();
	}
	
	/**
	 *  Implementation of Dijkstra 
	 *  Initialise the problem reading, compute the shortest path and print it
	 */
	public static void doDijkstra(City[] cities) {
		
		System.out.println("Dijkstra");
		Dijkstra dijkstra = new Dijkstra(cities);
		dijkstra.computeShortestPath();
		dijkstra.printBestPath();
	}

	public static void main(String[] args) {

		/* Check if there are any files being passed to be read */
		if (args.length > 0) {

			readFile(args[0]);

			doDFS(cities, numberOfPaths);
		
			doDijkstra(cities);
			
			if(numberOfCities > 10) {
				
			}
			
		} else {
			System.out.println("There was no test given.");
		}
	}

}
